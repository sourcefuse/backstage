---
name:  "Deploy Backstage Prod"

on:            # yamllint disable-line rule:truthy
  workflow_run:
    workflows: ["Docker Push"]
    types:
      - completed
    paths:
      - 'terraform/*'
      - '.github/workflows/deploy-backstage-prod.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    name: Deploy - Prod
    runs-on: ubuntu-latest
    environment:
      name: prod
    outputs:
      plan_id: ${{ steps.workflow_vars.outputs.plan_id }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # install aws cli
      - name: Install AWS CLI
        shell: bash
        run: ./scripts/dependencies/install-aws-cli.sh
        continue-on-error: false

      # install tfenv
      - name: Install tfenv
        shell: bash
        run: ./scripts/dependencies/install-tfenv.sh
        continue-on-error: false

      # Setup plan id for plan exports
      - name: Set outputs
        id: workflow_vars
        run: |
          echo "plan_id=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT
          echo "git_tag=${github.ref_name}" >> $GITHUB_OUTPUT

      # configure iam
      - name: Configure IAM Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.PROD_BACKSTAGE_DEPLOY_ARN }}
          aws-region: us-east-1
        continue-on-error: false

      # initialize backend
      - name: Initialize backend
        shell: bash
        run: |
          ./scripts/action-init-plan-apply.sh -i prod
        continue-on-error: false

      # Running plan
      - name: Plan against Prod
        id: prod_plan
        shell: bash
        run: |
          ./scripts/action-init-plan-apply.sh -p prod
        continue-on-error: false

        #publish plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: "prod-${{ steps.workflow_vars.outputs.plan_id }}.tfplan"
          path: "terraform/prod-${{ steps.workflow_vars.outputs.plan_id }}.tfplan"
        continue-on-error: false

      # Running apply
      - name: Deploy against Prod
        id: prod_apply
        shell: bash
        run: |
          export ECR_REGISTRY_ENDPOINT="${{ secrets.AWS_ACCOUNT }}.dkr.ecr.us-east-1.amazonaws.com"
          export IMAGE_NAME="$ECR_REGISTRY_ENDPOINT/sourcefuse-backstage"
          export IMAGE_TAG=${{ steps.workflow_vars.outputs.git_tag }}
          ./scripts/action-init-plan-apply.sh -a prod -var=container_image=$IMAGE_NAME:$IMAGE_TAG
        continue-on-error: false
